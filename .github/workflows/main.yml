name: testing

on:
  push:
    branches:
      - main

jobs:
  collect-data:
    runs-on: ubuntu-latest
    outputs:
      - manual_release: ${{ steps.release_type.outputs.manual }}
      - version_to_increment: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Collect all commit messages
        id: collect
        run: echo "::set-output name=commit_messages::${{ join(github.event.commits.*.message, '\n') }}"

      - name: Don't create a release?
        id: release_type
        run: echo "::set-output name=manual::${{ contains(steps.collect.outputs.commit_messages, '[release-manual]') }}"

      - name: Increment patch version?
        id: version
        run: echo "::set-output name=patch::${{ contains(steps.collect.outputs.commit_messages, '[release-patch]') }}"

      - name: Increment minor version?
        id: version
        run: echo "::set-output name=minor::${{ contains(steps.collect.outputs.commit_messages, '[release-minor]') }}"

      - name: Increment major version?
        id: version
        run: echo "::set-output name=major::${{ contains(steps.collect.outputs.commit_messages, '[release-major]') }}"

      - name: Figure out which version to increment
        if: ${{ !steps.manual_release.outputs.manual }}
        id: get_version
        env:
          CONTEXT: toJSON(steps)
        run: |
          echo "$CONTEXT"

          # We check for the patch flag first because all the other higher level flags override it
          if ${{ steps.version.outputs.patch }}
          then
            VERSION='patch'
          fi

          # Overrides patch if set
          if ${{ steps.version.outputs.minor }}
          then
            VERSION='minor'
          fi

          # Overrides patch or minor if set
          if ${{ steps.version.outputs.major }}
          then
            VERSION='major'
          fi

          # If none of the flags were set then assume that we're incrementing patch
          if [ -z ${VERSION} ]
          then
            VERSION='patch'
          fi

          echo "$VERSION"

          echo "::set-output name=version::${VERSION}"

  create-release:
    runs-on: ubuntu-latest
    needs: collect-data
    if: ${{ !needs.collect-data.outputs.manual }}
    steps:
      - name: Create release
        run: echo "release"

